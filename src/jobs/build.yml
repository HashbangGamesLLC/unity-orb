description: >
  Simple drop-in job to build your Unity game.

parameters:
  step-name:
    type: string
    default: Build the project
    description: |
      Specify a custom step name for the build command, if desired.
  executor:
    type: executor
    description: |
      Pick an Executor to run the build job with.
  unity-username-var-name:
    type: env_var_name
    default: "UNITY_USERNAME"
    description: |
      Enter the name of the environment variable containing your Unity username.
  unity-password-var-name:
    type: env_var_name
    default: "UNITY_PASSWORD"
    description: |
      Enter the name of the environment variable containing your Unity password.
  unity-serial-var-name:
    type: env_var_name
    default: "UNITY_SERIAL"
    description: |
      Enter the name of the environment variable containing your Unity serial number.
      Required if you have a Plus or Pro license.
  unity-license-var-name:
    type: env_var_name
    default: "UNITY_ENCODED_LICENSE"
    description: |
      Enter the name of the environment variable containing your Unity license file encoded in base64.
      Required if you have a Personal license.
  project-path:
    type: string
    default: "."
    description: |
      Enter the path of your Unity project.
      This should be the directory that has an "Assets" folder inside it.
  build-target:
    type: string
    description: |
      The target platform of your build.
      Accepted arguments vary with Unity's version and can be found in the docs: https://docs.unity3d.com/2022.2/Documentation/ScriptReference/BuildTarget.html
  build-name:
    type: string
    default: ""
    description: |
      Enter the name for this build.
      If left blank, the build will be named after the target platform.
  store-artifacts:
    type: boolean
    default: true
    description: |
      Whether to store the build output.
      If left to "false" you won't be able to download the build from the job's artifacts.
  compress:
    type: boolean
    default: true
    description: |
      Whether to compress the build output to a ".tar.gz" archive.
      This is recommended if you want to download the built artifacts from the CircleCI web app.
      If left to "false" for decompressed WebGL builds, you can run the project directly from the CircleCI web app.
  persist-to-workspace:
    type: boolean
    default: false
    description: Whether to persist the build output to workspace.
  return-license:
    type: boolean
    default: false
    description: |
      Whether to return the license used to build the project.
      Unity only allows returning professional licenses.
  fetch-submodules:
    type: boolean
    default: false
    description: |
      Whether to fetch git submodules
  no_output_timeout:
    type: string
    default: "20m"
    description: Elapsed time the command can run without output.
  build-method:
    type: string
    default: ""
    description: |
      The method used as argument for the Unity CLI "executeMethod" parameter.
      It must be a valid path to a static method and the class exist in the Assets/Editor directory.
      If left empty, the default build method will be used.
  custom-parameters:
    type: string
    default: ""
    description: |
      Additional arguments for the Unity CLI.
      Use it to pass arguments defined on your custom "build-method" or Unity's build options. Environment variables are supported.
      The parameters must be separated by space and must be in the format "-key value" or "-key" for booleans.
      Example: "-customArg1 WebGL -EnableHeadlessMode -customArg2 $CIRCLE_WORKFLOW_ID".
  run-upload-xcode:
    type: boolean
    default: false
    description: Whether to run the upload-xcode script after the build which will create a commit / push to an xcode project repository specified in TARGET_REPO_URL.
  target-repo-url:
    type: string
    default: "TARGET_REPO_URL"
    description: "The environment variable containing the target xcode repository URL."

executor: << parameters.executor >>

steps:
  - checkout
  - run:
      name: Fetch submodules
      command: |
        git submodule sync
        git submodule update --init
      condition: << parameters.fetch-submodules >>
  - prepare-env:
      unity-username-var-name: << parameters.unity-username-var-name >>
      unity-password-var-name: << parameters.unity-password-var-name >>
      unity-serial-var-name: << parameters.unity-serial-var-name >>
      unity-license-var-name: << parameters.unity-license-var-name >>
      project-path: <<parameters.project-path>>
      no_output_timeout: << parameters.no_output_timeout>>
  - build:
      step-name: << parameters.step-name >>
      build-name: <<parameters.build-name>>
      build-target: <<parameters.build-target>>
      project-path: <<parameters.project-path>>
      store-artifacts: <<parameters.store-artifacts>>
      compress: <<parameters.compress>>
      persist-to-workspace: <<parameters.persist-to-workspace>>
      no_output_timeout: << parameters.no_output_timeout>>
      build-method: <<parameters.build-method>>
      custom-parameters: <<parameters.custom-parameters>>
      run-upload-xcode: << parameters.run-upload-xcode >>
      target-repo-url: << parameters.target-repo-url >>      
  - when:
      condition: <<parameters.return-license>>
      steps:
        - return-license:
            unity-username-var-name: << parameters.unity-username-var-name >>
            unity-password-var-name: << parameters.unity-password-var-name >>       
